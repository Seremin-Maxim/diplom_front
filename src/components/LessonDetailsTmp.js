import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { API } from '../config/api';
import Navbar from './Navbar';
import './LessonDetailsTmp.css';

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–∫–µ
 */
const LessonDetailsTmp = () => {
  const { lessonId } = useParams();
  const navigate = useNavigate();
  
  const [lesson, setLesson] = useState(null);
  const [tests, setTests] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [courseId, setCourseId] = useState(null);
  const [isCompleted, setIsCompleted] = useState(false);
  const [completionLoading, setCompletionLoading] = useState(false);
  const [activeTest, setActiveTest] = useState(null);
  const [parsedContent, setParsedContent] = useState(null);
  const [rawContent, setRawContent] = useState('');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–∫–µ –∏ —Ç–µ—Å—Ç–∞—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchLessonDetails = async () => {
      try {
        setLoading(true);
        const token = localStorage.getItem('token');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
        const lessonResponse = await axios.get(API.LESSONS.BY_ID(lessonId), {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        setLesson(lessonResponse.data);
        setCourseId(lessonResponse.data.courseId);
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (lessonResponse.data.content) {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Å–∏–º–≤–æ–ª–∞ {, —á—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ JSON
            if (lessonResponse.data.content.trim().startsWith('{')) {
              const contentData = JSON.parse(lessonResponse.data.content);
              setParsedContent(contentData);
            } else {
              // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
              setParsedContent(null);
              setRawContent(lessonResponse.data.content);
            }
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞:', err);
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π HTML/—Ç–µ–∫—Å—Ç
            setParsedContent(null);
            setRawContent(lessonResponse.data.content);
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ä–æ–∫
        try {
          const enrollmentResponse = await axios.get(API.ENROLLMENTS.LESSONS.CHECK_COMPLETION(lessonId), {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          setIsCompleted(enrollmentResponse.data);
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞:', err);
          // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —É—Ä–æ–∫
        try {
          const enrollmentStatusResponse = await axios.get(API.ENROLLMENTS.LESSONS.CHECK_ENROLLMENT(lessonId), {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —É—Ä–æ–∫, –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã
          if (enrollmentStatusResponse.data === true) {
            try {
              const testsResponse = await axios.get(API.TESTS_ACCESS.AVAILABLE_TESTS(lessonId), {
                headers: {
                  'Authorization': `Bearer ${token}`
                }
              });
              
              setTests(testsResponse.data);
            } catch (err) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤:', err);
              // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            }
          } else {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —É—Ä–æ–∫, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
            try {
              await axios.post(API.ENROLLMENTS.LESSONS.ENROLL(lessonId), {}, {
                headers: {
                  'Authorization': `Bearer ${token}`
                }
              });
              
              // –ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫, –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã
              const testsResponse = await axios.get(API.TESTS_ACCESS.AVAILABLE_TESTS(lessonId), {
                headers: {
                  'Authorization': `Bearer ${token}`
                }
              });
              
              setTests(testsResponse.data);
            } catch (enrollErr) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫:', enrollErr);
            }
          }
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Ä–æ–∫:', err);
        }
        
        setError(null);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } finally {
        setLoading(false);
      }
    };

    fetchLessonDetails();
  }, [lessonId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É—Ä–æ–∫–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ
  const handleCompleteLesson = async () => {
    try {
      setCompletionLoading(true);
      const token = localStorage.getItem('token');
      
      await axios.put(API.ENROLLMENTS.LESSONS.COMPLETE(lessonId), {}, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      setIsCompleted(true);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É—Ä–æ–∫–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
      setCompletionLoading(false);
    }
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ—Å—Ç—É
  const goToTest = (testId, accessToken) => {
    navigate(`/tests/${testId}?token=${accessToken}`);
  };

  /**
   * –†–µ–Ω–¥–µ—Ä–∏—Ç –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Editor.js
   * @param {Object} content - –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ Editor.js
   * @returns {JSX.Element} - –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
   */
  const renderEditorContent = (content) => {
    if (!content || !content.blocks || content.blocks.length === 0) {
      return (
        <div className="lesson-tmp-no-content">
          <div className="lesson-tmp-no-content-icon">üìù</div>
          <p>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.</p>
        </div>
      );
    }

    return (
      <div className="lesson-tmp-editor-content">
        {content.blocks.map((block, index) => {
          switch (block.type) {
            case 'header':
              const HeaderTag = `h${block.data.level}`;
              return (
                <HeaderTag key={index} className="lesson-tmp-header-block"
                   dangerouslySetInnerHTML={{ __html: block.data.text }} />
              );
              
            case 'paragraph':
              return (
                <p key={index} className="lesson-tmp-paragraph-block" 
                   dangerouslySetInnerHTML={{ __html: block.data.text }} />
              );
              
            case 'list':
              const ListTag = block.data.style === 'ordered' ? 'ol' : 'ul';
              return (
                <ListTag key={index} className="lesson-tmp-list-block">
                  {block.data.items.map((item, i) => (
                    <li key={i} dangerouslySetInnerHTML={{ __html: item }} />
                  ))}
                </ListTag>
              );
              
            case 'code':
              return (
                <div key={index} className="lesson-tmp-code-block">
                  <pre>
                    <code>{block.data.code}</code>
                  </pre>
                </div>
              );
              
            case 'quote':
              return (
                <blockquote key={index} className="lesson-tmp-quote-block">
                  <p dangerouslySetInnerHTML={{ __html: block.data.text }} />
                  {block.data.caption && (
                    <cite>{block.data.caption}</cite>
                  )}
                </blockquote>
              );
              
            case 'delimiter':
              return <hr key={index} className="lesson-tmp-delimiter" />;
              
            default:
              return (
                <div key={index} className="lesson-tmp-unknown-block">
                  –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–ª–æ–∫–∞: {block.type}
                </div>
              );
          }
        })}
      </div>
    );
  };

  if (loading) {
    return (
      <>
        <Navbar />
        <div className="lesson-tmp-loading">
          <div className="lesson-tmp-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–∫–µ...</p>
        </div>
      </>
    );
  }

  if (error) {
    return (
      <>
        <Navbar />
        <div className="lesson-tmp-error">
          <div className="lesson-tmp-error-icon">!</div>
          <p>{error}</p>
          <button onClick={() => navigate('/home')} className="lesson-tmp-button">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤
          </button>
        </div>
      </>
    );
  }

  if (!lesson) {
    return (
      <>
        <Navbar />
        <div className="lesson-tmp-error">
          <div className="lesson-tmp-error-icon">?</div>
          <p>–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
          <button onClick={() => navigate('/home')} className="lesson-tmp-button">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤
          </button>
        </div>
      </>
    );
  }

  return (
    <>
      <Navbar />
      <div className="lesson-tmp-container">
        <div className="lesson-tmp-content-wrapper">
          <div className="lesson-tmp-header">
            {courseId && (
              <button onClick={() => navigate(`/courses/${courseId}`)} className="lesson-tmp-header-back-button">
                ‚Üê
              </button>
            )}
            <div className="lesson-tmp-header-content">
              <h1 className="lesson-tmp-title">{lesson.title}</h1>
            </div>
          </div>

          <div className="lesson-tmp-content">
            <div className="lesson-tmp-main">
              <div className="lesson-tmp-content-section">
                <h2 className="lesson-tmp-section-title">
                  <span className="lesson-tmp-section-icon">üìñ</span>
                  –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞
                </h2>
                
                {parsedContent ? (
                  renderEditorContent(parsedContent)
                ) : rawContent ? (
                  <div className="lesson-tmp-raw-content">
                    <div dangerouslySetInnerHTML={{ __html: rawContent }} />
                  </div>
                ) : (
                  <div className="lesson-tmp-no-content">
                    <div className="lesson-tmp-no-content-icon">üìù</div>
                    <p>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.</p>
                  </div>
                )}
              </div>
              
              <div className="lesson-tmp-tests-section">
                <h2 className="lesson-tmp-section-title">
                  <span className="lesson-tmp-section-icon">‚úì</span>
                  –¢–µ—Å—Ç—ã –ø–æ —É—Ä–æ–∫—É
                </h2>
                
                {tests.length > 0 ? (
                  <div className="lesson-tmp-tests-list">
                    {tests.map((test) => (
                      <div 
                        key={test.testId} 
                        className={`lesson-tmp-test-card ${activeTest === test.testId ? 'active' : ''}`}
                        onClick={() => setActiveTest(test.testId)}
                      >
                        <div className="lesson-tmp-test-info">
                          <h3 className="lesson-tmp-test-title">{test.testTitle}</h3>
                          {test.description && (
                            <p className="lesson-tmp-test-description">{test.description}</p>
                          )}
                          {test.completed && (
                            <div className="lesson-tmp-test-score">
                              <span className="lesson-tmp-score-icon">üèÜ</span>
                              <span>–û—Ü–µ–Ω–∫–∞: {test.score !== null ? `${test.score}` : '–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ'}</span>
                            </div>
                          )}
                        </div>
                        
                        <button 
                          className="lesson-tmp-test-button" 
                          onClick={() => goToTest(test.testId, test.accessToken)}
                        >
                          {test.completed ? '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å' : '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç'}
                        </button>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="lesson-tmp-no-tests">
                    <div className="lesson-tmp-no-tests-icon">üìã</div>
                    <p>–î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.</p>
                  </div>
                )}
              </div>
            </div>
            
            <div className="lesson-tmp-sidebar">
              <div className="lesson-tmp-sidebar-section">
                <h3 className="lesson-tmp-sidebar-title">–û–± —É—Ä–æ–∫–µ</h3>
                <div className="lesson-tmp-sidebar-content">
                  <div className="lesson-tmp-sidebar-item">
                    <span className="lesson-tmp-sidebar-icon">üìö</span>
                    <span>–ö—É—Ä—Å: {lesson.courseTitle || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                  </div>
                  {lesson.orderNumber !== null && lesson.orderNumber !== undefined && (
                    <div className="lesson-tmp-sidebar-item">
                      <span className="lesson-tmp-sidebar-icon">üî¢</span>
                      <span>–£—Ä–æ–∫ ‚Ññ{lesson.orderNumber}</span>
                    </div>
                  )}
                  {lesson.authorName && (
                    <div className="lesson-tmp-sidebar-item">
                      <span className="lesson-tmp-sidebar-icon">üë®‚Äçüè´</span>
                      <span>–ê–≤—Ç–æ—Ä: {lesson.authorName}</span>
                    </div>
                  )}
                  {tests.length > 0 && (
                    <div className="lesson-tmp-sidebar-item">
                      <span className="lesson-tmp-sidebar-icon">‚úì</span>
                      <span>{tests.length} {getTestsWord(tests.length)}</span>
                    </div>
                  )}
                  {isCompleted && (
                    <div className="lesson-tmp-sidebar-item lesson-tmp-completed-item">
                      <span className="lesson-tmp-sidebar-icon">‚úÖ</span>
                      <span>–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω</span>
                    </div>
                  )}
                  {!isCompleted && (
                    <div className="lesson-tmp-sidebar-item">
                      <span className="lesson-tmp-sidebar-icon">‚è≥</span>
                      <span>–£—Ä–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω</span>
                    </div>
                  )}
                  {lesson.createdAt && (
                    <div className="lesson-tmp-sidebar-item">
                      <span className="lesson-tmp-sidebar-icon">üìÖ</span>
                      <span>–°–æ–∑–¥–∞–Ω: {new Date(lesson.createdAt).toLocaleDateString()}</span>
                    </div>
                  )}
                  {lesson.updatedAt && lesson.updatedAt !== lesson.createdAt && (
                    <div className="lesson-tmp-sidebar-item">
                      <span className="lesson-tmp-sidebar-icon">üîÑ</span>
                      <span>–û–±–Ω–æ–≤–ª–µ–Ω: {new Date(lesson.updatedAt).toLocaleDateString()}</span>
                    </div>
                  )}
                </div>
              </div>
              
              {!isCompleted && (
                <div className="lesson-tmp-sidebar-cta">
                  <p>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞</p>
                  <button 
                    className="lesson-tmp-sidebar-button" 
                    onClick={handleCompleteLesson}
                    disabled={completionLoading}
                  >
                    {completionLoading ? '–û—Ç–º–µ—á–∞–µ–º...' : '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π'}
                  </button>
                </div>
              )}
              
              {tests.length > 0 && (
                <div className="lesson-tmp-sidebar-tests">
                  <h3 className="lesson-tmp-sidebar-title">–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã</h3>
                  <div className="lesson-tmp-sidebar-tests-list">
                    {tests.map((test) => (
                      <div key={test.testId} className="lesson-tmp-sidebar-test-item">
                        <span className="lesson-tmp-sidebar-test-icon">
                          {test.completed ? '‚úÖ' : 'üìù'}
                        </span>
                        <span className="lesson-tmp-sidebar-test-name">{test.testTitle}</span>
                        {test.completed && test.score !== null && (
                          <span className="lesson-tmp-sidebar-test-score">{test.score}</span>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "—Ç–µ—Å—Ç"
function getTestsWord(count) {
  const lastDigit = count % 10;
  const lastTwoDigits = count % 100;
  
  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return '—Ç–µ—Å—Ç–æ–≤';
  }
  
  if (lastDigit === 1) {
    return '—Ç–µ—Å—Ç';
  }
  
  if (lastDigit >= 2 && lastDigit <= 4) {
    return '—Ç–µ—Å—Ç–∞';
  }
  
  return '—Ç–µ—Å—Ç–æ–≤';
}

export default LessonDetailsTmp;
