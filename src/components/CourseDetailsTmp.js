import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { API } from '../config/api';
import Navbar from './Navbar';
import './CourseDetailsTmp.css';

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
 */
const CourseDetailsTmp = () => {
  const { courseId } = useParams();
  const navigate = useNavigate();
  
  const [course, setCourse] = useState(null);
  const [lessons, setLessons] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isEnrolled, setIsEnrolled] = useState(false);
  const [enrollmentLoading, setEnrollmentLoading] = useState(false);
  const [activeLesson, setActiveLesson] = useState(null);
  const [teacher, setTeacher] = useState(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ –∏ —É—Ä–æ–∫–∞—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchCourseDetails = async () => {
      try {
        setLoading(true);
        const token = localStorage.getItem('token');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
        const courseResponse = await axios.get(API.COURSES.BY_ID(courseId), {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        setCourse(courseResponse.data);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å authorId
        if (courseResponse.data.authorId) {
          try {
            // –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å—Ç—å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID
            // –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ API –Ω–µ—Ç, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
            const teacherResponse = await axios.get(`${API.USERS.PROFILE}/${courseResponse.data.authorId}`, {
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            setTeacher(teacherResponse.data);
          } catch (teacherErr) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', teacherErr);
            // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –≤—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
          }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–∞
        const lessonsResponse = await axios.get(API.LESSONS.BY_COURSE_ID(courseId), {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        setLessons(lessonsResponse.data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫—É—Ä—Å
        const enrollmentResponse = await axios.get(API.ENROLLMENTS.COURSES.CHECK_ENROLLMENT(courseId), {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        setIsEnrolled(enrollmentResponse.data);
        setError(null);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } finally {
        setLoading(false);
      }
    };

    fetchCourseDetails();
  }, [courseId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å
  const handleEnrollment = async () => {
    try {
      setEnrollmentLoading(true);
      const token = localStorage.getItem('token');
      
      await axios.post(API.ENROLLMENTS.COURSES.ENROLL(courseId), {}, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      setIsEnrolled(true);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏
      const lessonsResponse = await axios.get(API.LESSONS.BY_COURSE_ID(courseId), {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      setLessons(lessonsResponse.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
      setEnrollmentLoading(false);
    }
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É—Ä–æ–∫—É
  const goToLesson = (lessonId) => {
    navigate(`/lessons/${lessonId}`);
  };

  if (loading) {
    return (
      <>
        <Navbar />
        <div className="course-tmp-loading">
          <div className="course-tmp-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ...</p>
        </div>
      </>
    );
  }

  if (error) {
    return (
      <>
        <Navbar />
        <div className="course-tmp-error">
          <div className="course-tmp-error-icon">!</div>
          <p>{error}</p>
          <button onClick={() => navigate('/home')} className="course-tmp-button">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤
          </button>
        </div>
      </>
    );
  }

  if (!course) {
    return (
      <>
        <Navbar />
        <div className="course-tmp-error">
          <div className="course-tmp-error-icon">?</div>
          <p>–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
          <button onClick={() => navigate('/home')} className="course-tmp-button">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤
          </button>
        </div>
      </>
    );
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
  const teacherName = teacher ? 
    `${teacher.firstName || ''} ${teacher.lastName || ''}`.trim() : 
    course.authorName || '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å';

  return (
    <>
      <Navbar />
      <div className="course-tmp-container">
        <div className="course-tmp-content-wrapper">
          <div className="course-tmp-header">
            <button onClick={() => navigate('/home')} className="course-tmp-header-back-button">
              ‚Üê
            </button>
            <div className="course-tmp-header-content">
              <h1 className="course-tmp-title">{course.title}</h1>
            </div>
          </div>

          {course.description && (
            <div className="course-tmp-description-block">
              <h2 className="course-tmp-section-title">
                <span className="course-tmp-section-icon">üìã</span>
                –û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞
              </h2>
              <p className="course-tmp-description-text">{course.description}</p>
            </div>
          )}

          <div className="course-tmp-content">
            <div className="course-tmp-lessons-section">
              <h2 className="course-tmp-section-title">
                <span className="course-tmp-section-icon">üìù</span>
                –£—Ä–æ–∫–∏ –∫—É—Ä—Å–∞
              </h2>
              
              {lessons.length === 0 ? (
                <div className="course-tmp-no-lessons">
                  <div className="course-tmp-no-lessons-icon">üì≠</div>
                  <p>–í —ç—Ç–æ–º –∫—É—Ä—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤</p>
                </div>
              ) : (
                <div className="course-tmp-lessons-list">
                  {lessons.map((lesson, index) => (
                    <div 
                      key={lesson.id} 
                      className={`course-tmp-lesson-card ${activeLesson === lesson.id ? 'active' : ''}`}
                      onClick={() => setActiveLesson(lesson.id)}
                    >
                      <div className="course-tmp-lesson-number">{index + 1}</div>
                      <div className="course-tmp-lesson-info">
                        <h3 className="course-tmp-lesson-title">{lesson.title}</h3>
                        {lesson.description && (
                          <p className="course-tmp-lesson-description">{lesson.description}</p>
                        )}
                      </div>
                      <div className="course-tmp-lesson-action">
                        {isEnrolled ? (
                          <button 
                            className="course-tmp-lesson-button" 
                            onClick={() => goToLesson(lesson.id)}
                          >
                            –ü–µ—Ä–µ–π—Ç–∏
                          </button>
                        ) : (
                          <div className="course-tmp-lesson-locked">
                            <span className="course-tmp-lock-icon">üîí</span>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
            
            <div className="course-tmp-sidebar">
              <div className="course-tmp-sidebar-section">
                <h3 className="course-tmp-sidebar-title">–û –∫—É—Ä—Å–µ</h3>
                <div className="course-tmp-sidebar-content">
                  <div className="course-tmp-sidebar-item">
                    <span className="course-tmp-sidebar-icon">üë®‚Äçüè´</span>
                    <span>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacherName}</span>
                  </div>
                  <div className="course-tmp-sidebar-item">
                    <span className="course-tmp-sidebar-icon">üìö</span>
                    <span>{lessons.length} {getLessonsWord(lessons.length)}</span>
                  </div>
                  {isEnrolled && (
                    <div className="course-tmp-sidebar-item">
                      <span className="course-tmp-sidebar-icon">‚úì</span>
                      <span>–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å</span>
                    </div>
                  )}
                </div>
              </div>
              
              {!isEnrolled && (
                <div className="course-tmp-sidebar-cta">
                  <p>–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫—É—Ä—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —É—Ä–æ–∫–∞–º</p>
                  <button 
                    className="course-tmp-sidebar-button" 
                    onClick={handleEnrollment}
                    disabled={enrollmentLoading}
                  >
                    {enrollmentLoading ? '–ó–∞–ø–∏—Å—å...' : '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å'}
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "—É—Ä–æ–∫"
function getLessonsWord(count) {
  const lastDigit = count % 10;
  const lastTwoDigits = count % 100;
  
  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    return '—É—Ä–æ–∫–æ–≤';
  }
  
  if (lastDigit === 1) {
    return '—É—Ä–æ–∫';
  }
  
  if (lastDigit >= 2 && lastDigit <= 4) {
    return '—É—Ä–æ–∫–∞';
  }
  
  return '—É—Ä–æ–∫–æ–≤';
}

export default CourseDetailsTmp;
